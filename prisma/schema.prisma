//
// Este es tu archivo de esquema de Prisma,
// puedes aprender más sobre él en la documentación: https://pris.ly/d/prisma-schema
//
// ¿Buscas formas de acelerar tus consultas o escalar fácilmente con tus funciones serverless o edge?
// Prueba Prisma Accelerate: https://pris.ly/cli/accelerate-init
//
// Ejemplos de comandos útiles:
// npx prisma migrate reset 
// npx prisma migrate dev --name 
// npx prisma generate
// npx prisma studio 
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
//  Enumerados personalizados
//

// Tipo de usuario: "admin", "client" o "lawyer"
enum user_type {
  admin
  client
  lawyer
}

// Estado del usuario: "active", "suspended" o "pending"
enum user_status {
  active
  suspended
  pending
}

// Tipo de consulta en videollamada: "public", "private" o "own"
enum consultation_type {
  public
  private
  own
}

// Estado de la videollamada: "confirmed", "pending", "cancelled", "in_progress" (en progreso) o "finished"
enum video_call_status {
  confirmed
  pending
  cancelled
  in_progress
  finished
}

// Estado del mensaje: "pending", "answered" o "finished"
enum message_status {
  pending
  answered
  finished
}

// Estado del artículo: "pending", "accepted" o "rejected"
enum article_status {
  pending
  accepted
  rejected
}

//
// Modelos (Tablas)
//

//Usuarios que se suscriben
model ArxatecSubscribers {
  id        Int      @id @default(autoincrement()) /// Identificador único del suscriptor
  name      String   @db.VarChar(100) /// Nombre del suscriptor
  email     String   @unique @db.VarChar(255) /// Email único del suscriptor
  createdAt DateTime @default(now()) /// Fecha de suscripción
}

// Tabla de usuarios generales
model User {
  id                 Int         @id @default(autoincrement()) /// Identificador único del usuario
  first_name         String /// Nombre del usuario
  last_name          String /// Apellido del usuario
  email              String      @unique /// Email único
  password           String /// Contraseña (almacenada hasheada)
  user_type          user_type? /// Tipo de usuario (admin, client, lawyer)
  profile_image      String? /// URL de la imagen de perfil
  address            String? /// Dirección del usuario
  phone              String? /// Teléfono principal
  additional_phone   String? /// Teléfono secundario
  gender             String? /// Género del usuario
  birth_date         DateTime?   @db.Date /// Fecha de nacimiento
  status             user_status /// Estado del usuario (active, suspended, pending)
  creation_timestamp DateTime @default(now()) /// Timestamp de creación del registro

  // Relaciones 1:1 con datos adicionales
  lawyerData LawyersData? /// Datos adicionales para usuarios tipo abogado
  clientData ClientsData? /// Datos adicionales para usuarios tipo cliente
  adminData  AdminsData? /// Datos adicionales para usuarios tipo administrador

  // Relación 1:N con artículos
  articles Article[] /// Artículos publicados por el usuario

  @@map("users")
}

// Datos adicionales para abogados (relación uno a uno con User)
model LawyersData {
  id             Int    @id /// Identificador (igual al id del usuario)
  license_number String /// Número de licencia del abogado

  // Relación: cada registro se vincula a un usuario
  user                User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  VideoCallService    VideoCallService[]
  ConsultationService ConsultationService[]

  @@map("lawyers_data")
}

// Datos adicionales para clientes (relación uno a uno con User)
model ClientsData {
  id Int @id /// Identificador (igual al id del usuario)

  // Relación: cada registro se vincula a un usuario
  user                User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  VideoCallService    VideoCallService[]
  ConsultationService ConsultationService[]

  @@map("clients_data")
}


// Datos adicionales para administradores (relación uno a uno con User)
model AdminsData {
  id    Int     @id /// Identificador (igual al id del usuario)
  notes String? /// Notas adicionales sobre el administrador

  // Relación: vincula el registro a un usuario
  user User @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("admins_data")
}

// Registro de servicios de videollamada
model VideoCallService {
  id                Int               @id @default(autoincrement()) /// Identificador único del servicio
  client_id         Int /// Identificador del cliente (ClientsData) solicitante
  lawyer_id         Int? /// Identificador del abogado (LawyersData) asignado (opcional)
  subject           String /// Asunto o motivo de la consulta
  service_date      DateTime          @db.Date /// Fecha programada para la consulta
  service_time      DateTime          @db.Time /// Hora programada para la consulta
  description       String /// Descripción detallada del servicio
  consultation_type consultation_type /// Tipo de consulta (public, private, own)
  status            video_call_status /// Estado actual de la videollamada
  creation_date     DateTime?         @db.Date /// Fecha de creación del registro
  creation_time     DateTime?         @db.Time /// Hora de creación del registro
  video_call_link   String? /// Enlace para unirse a la videollamada
  message           String? /// Mensaje adicional o notas

  // Relaciones a ClientsData (cliente) y LawyersData (abogado)
  client ClientsData  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  lawyer LawyersData? @relation(fields: [lawyer_id], references: [id], onDelete: Cascade)

  @@map("video_call_services")
}

// Registro de servicios de consulta (mensajes)
model ConsultationService {
  id                Int            @id @default(autoincrement()) /// Identificador único de la consulta
  client_id         Int /// Identificador del cliente (ClientsData) que envía la consulta
  lawyer_id         Int? /// Identificador del abogado (LawyersData) asignado (opcional)
  subject           String /// Asunto de la consulta
  message           String /// Contenido de la consulta enviada
  response          String? /// Respuesta del abogado (opcional)
  consultation_date DateTime       @db.Date /// Fecha de la consulta
  consultation_time DateTime       @db.Time /// Hora de la consulta
  status            message_status /// Estado actual de la consulta
  creation_date     DateTime?      @db.Date /// Fecha de creación del registro
  creation_time     DateTime?      @db.Time /// Hora de creación del registro

  // Relaciones a ClientsData (cliente) y LawyersData (abogado)
  client ClientsData  @relation(fields: [client_id], references: [id], onDelete: Cascade)
  lawyer LawyersData? @relation(fields: [lawyer_id], references: [id], onDelete: Cascade)

  @@map("consultation_services")
}

// Tabla de artículos publicados por los usuarios
model Article {
  id               Int            @id @default(autoincrement()) /// Identificador único del artículo
  user_id          Int /// Identificador del autor (usuario)
  title            String /// Título del artículo
  content          String /// Contenido completo del artículo
  banner           String? /// URL o path del banner del artículo
  category_id      Int /// Identificador de la categoría del artículo
  publication_date DateTime       @db.Date /// Fecha de publicación
  publication_time DateTime       @db.Time /// Hora de publicación
  status           article_status /// Estado del artículo (pending, accepted, rejected)

  // Relaciones
  user            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  articleCategory ArticleCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("article")
}

// Nueva tabla para categorías de artículos
model ArticleCategory {
  id          Int     @id @default(autoincrement()) /// Identificador único de la categoría
  name        String /// Nombre de la categoría
  description String? /// Descripción opcional de la categoría

  // Relación
  articles Article[] /// Lista de artículos asociados a esta categoría

  @@map("article_categories")
}
