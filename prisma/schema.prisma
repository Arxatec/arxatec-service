//
// Este es tu archivo de esquema de Prisma,
// puedes aprender más sobre él en la documentación: https://pris.ly/d/prisma-schema
//
// ¿Buscas formas de acelerar tus consultas o escalar fácilmente con tus funciones serverless o edge?
// Prueba Prisma Accelerate: https://pris.ly/cli/accelerate-init
//
// Ejemplos de comandos útiles:
// npx prisma migrate reset 
// npx prisma migrate dev --init
// npx prisma generate
// npx prisma studio 
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  admin
  client
  lawyer
}

enum user_status {
  active
  suspended
  pending
}

enum article_status {
  pending
  accepted
  rejected
}

enum work_day {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}
enum service_type {
  case
  consultation
}

enum community_user_type {
  moderator // Moderador de la comunidad
  member // Miembro de la comunidad
}

enum ReactionType {
  like // Me gusta
  dislike // No me gusta
}

enum ReactionTarget {
  publication // Reacción a una publicación
  comment // Reacción a un comentario
  reply // Reacción a una respuesta
}

enum notification_type {
  info
  success
  error
  alert
}

enum case_urgency {
  alta
  media
  baja
}

enum case_status {
  abierto
  en_progreso
  cerrado
  archivado
}

enum consultation_status {
  pendiente
  respondida
  cerrada
}

enum consultation_priority {
  alta
  media
  baja
}

enum call_status {
  scheduled
  completed
  cancelled
  missed
}

enum actor_type {
  lawyer
  client
}

model Notification {
  id          Int               @id @default(autoincrement()) /// Identificador único de la notificación
  receiverId  Int /// ID del usuario receptor
  senderId    Int? /// ID del usuario emisor (opcional)
  title       String /// Título de la notificación
  description String /// Descripción del evento notificado
  type        notification_type /// Tipo de notificación: info, success, error o alert
  createdAt   DateTime          @default(now()) /// Fecha de creación de la notificación

  url String? /// Ruta/URL destino para la notificación (opcional)

  receiver Users  @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  sender   Users? @relation("SentNotifications", fields: [senderId], references: [id])

  @@map("notifications")
}

model ArxatecSubscribers {
  id        Int      @id @default(autoincrement()) /// Identificador único del suscriptor
  name      String   @db.VarChar(100) /// Nombre del suscriptor
  email     String   @unique @db.VarChar(255) /// Email único del suscriptor
  createdAt DateTime @default(now()) /// Fecha de suscripción

  @@map("arxatec_subscribers")
}

model Users {
  id                 Int         @id @default(autoincrement()) /// Identificador único del usuario
  first_name         String /// Nombre del usuario
  last_name          String /// Apellido del usuario
  email              String      @unique /// Email único
  password           String /// Contraseña (almacenada hasheada)
  user_type          user_type? /// Tipo de usuario
  profile_image      String? /// URL de la imagen de perfil
  phone              String? /// Teléfono principal
  status             user_status /// Estado del usuario
  birth_date         DateTime?   @db.Date /// Fecha de nacimiento
  creation_timestamp DateTime? /// Timestamp de creación del registro

  lawyerDetails         LawyerDetails? /// Relación uno a uno: Datos adicionales para abogados
  clientDetails         ClientDetails? /// Relación uno a uno: Datos adicionales para clientes
  adminDetails          AdminDetails? /// Relación uno a uno: Datos adicionales para administradores
  userDetails           UserDetails? /// Relación uno a uno: Datos generales del usuario
  receivedNotifications Notification[] @relation("ReceivedNotifications") /// Notificaciones recibidas por el usuario
  sentNotifications     Notification[] @relation("SentNotifications") /// Notificaciones enviadas por el usuario

  @@map("users")
}

model LawyerDetails {
  lawyer_id      Int    @id /// Identificador (igual al id del usuario)
  license_number String /// Número de licencia del abogado
  specialty      String /// Especialidad del abogado (ej. derecho penal, derecho civil, etc.)
  experience     Int /// Años de experiencia del abogado
  biography      String /// Biografía del abogado
  linkedin       String /// URL del perfil de LinkedIn

  user                 Users                  @relation(fields: [lawyer_id], references: [id], onDelete: Cascade)
  lawyerService        LawyerService? /// Relación uno a uno: Servicio del abogado
  events               Events[] /// Relación uno a muchos: Eventos asociados a este abogado

  @@map("lawyer_details")
}

model ClientDetails {
  client_id        Int     @id /// Identificador (igual al id del usuario)
  budget_range     String? /// Rango presupuestario para contratar el servicio legal
  urgency_level    String? /// Nivel de urgencia o prioridad de la necesidad legal
  requirement_type String? /// Tipo de asistencia legal requerida

  user                 Users                  @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@map("client_details")
}

model AdminDetails {
  admin_id Int     @id /// Identificador (igual al id del usuario)
  notes    String? /// Notas adicionales del administrador

  user Users @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@map("admin_details")
}

model UserDetails {
  user_id    Int       @id /// Identificador (igual al id del usuario)
  gender     String? /// Género del usuario
  birth_date DateTime? @db.Date /// Fecha de nacimiento del usuario

  articles Articles[] /// Relación uno a muchos: Artículos asociados a este UserDetails

  user           Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Preference     Preference?
  Locations      Locations?
  communityUsers CommunityUsers[] /// Relación uno a muchos: Membresías en comunidades asociadas a este UserDetails
  external_clients    ExternalClients[] /// Clientes externos registrados por este usuario
  services_as_lawyer  Services[]        @relation("LawyerServices") /// Servicios en los que actúa como abogado
  services_as_client  Services[]        @relation("ClientServices") /// Servicios en los que actúa como cliente

  @@map("user_details")
}

model Preference {
  id                    Int     @id @default(autoincrement()) /// Identificador único de la preferencia
  user_id               Int     @unique /// Identificador del UserDetails
  communication_channel String? /// Medio preferido de comunicación del usuario
  receive_notifications Boolean /// Indica si se desean recibir notificaciones
  notification_channels String? /// Canales para recibir notificaciones (Email, SMS o dentro de la plataforma)

  userDetails UserDetails @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("preferences")
}

model Locations {
  id           Int     @id @default(autoincrement()) /// Identificador único de la ubicación
  user_id      Int     @unique /// Identificador del UserDetails
  country      String  @db.VarChar(100) /// País de la ubicación
  state        String  @db.VarChar(100) /// Área administrativa principal (estado, región, provincia)
  city         String  @db.VarChar(100) /// Ciudad o municipio
  latitude     Float /// Latitud
  longitude    Float /// Longitud
  full_address String? @db.VarChar(255) /// Dirección completa (opcional)
  postal_code  String? @db.VarChar(20) /// Código postal (opcional)

  userDetails UserDetails @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("locations")
}

model Articles {
  id                    Int            @id @default(autoincrement()) /// Identificador único del artículo
  user_id               Int /// Identificador del autor (UserDetails)
  title                 String /// Título del artículo
  content               String /// Contenido del artículo
  banner                String? /// Banner del artículo
  category_id           Int /// Identificador de la categoría
  publication_timestamp DateTime /// Fecha de publicación
  status                article_status /// Estado del artículo

  userDetails     UserDetails       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  articleCategory ArticleCategories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("articles")
}

model ArticleCategories {
  id          Int     @id @default(autoincrement()) /// Identificador único de la categoría
  name        String /// Nombre del servicio (ej. consulta legal, videollamada, mensaje)
  description String? /// Descripción del servicio

  articles Articles[] /// Relación uno a muchos: Artículos asociados a esta categoría

  @@map("article_categories")
}

model LawyerService {
  lawyer_id        Int    @id /// Identificador único del servicio del abogado (igual al id de LawyerDetails)
  preferred_client String /// Tipo de clientes preferidos
  payment_methods  String /// Métodos de pago aceptados (ej. Tarjeta de crédito, PayPal, Transferencia)
  currency         String /// Moneda para las tarifas (ej. USD, EUR)

  lawyerDetails LawyerDetails   @relation(fields: [lawyer_id], references: [lawyer_id], onDelete: Cascade)
  attorneyFees  AttorneyFees[] /// Relación uno a muchos: Tarifas asociadas a este servicio
  workSchedules WorkSchedules[] /// Relación uno a muchos: Horarios de trabajo asociados a este servicio

  @@map("lawyer_service_details")
}

model AttorneyFees {
  id                  Int   @id @default(autoincrement()) /// Identificador único de la tarifa
  lawyer_id           Int /// Identificador del servicio asociado (de LawyerService)
  service_category_id Int /// Identificador de la categoría de servicio
  fee                 Float /// Monto a cobrar por el servicio

  lawyerServiceDetails LawyerService     @relation(fields: [lawyer_id], references: [lawyer_id], onDelete: Cascade)
  serviceCategory      ServiceCategories @relation(fields: [service_category_id], references: [id], onDelete: Cascade)

  @@map("attorney_fees")
}

model ServiceCategories {
  id          Int     @id @default(autoincrement()) /// Identificador único de la categoría
  name        String /// Nombre del servicio (ej. consulta legal, videollamada, mensaje)
  description String? /// Descripción del servicio

  attorneyFees AttorneyFees[] /// Relación uno a muchos: Tarifas asociadas a esta categoría

  @@map("service_categories")
}

model WorkSchedules {
  id         Int      @id @default(autoincrement()) /// Identificador único del horario de trabajo
  lawyer_id  Int /// Identificador del servicio del abogado (LawyerService)
  day        work_day /// Día de la semana
  open_time  DateTime @db.Time /// Hora de apertura (solo la hora)
  close_time DateTime @db.Time /// Hora de cierre (solo la hora)

  lawyerServiceDetails LawyerService @relation(fields: [lawyer_id], references: [lawyer_id], onDelete: Cascade)

  @@map("work_schedules")
}

model CommunityUsers {
  id                 Int                 @id @default(autoincrement()) /// Identificador único de la membresía en la comunidad
  user_id            Int /// Identificador del usuario (UserDetails)
  community_id       Int /// Identificador de la comunidad
  type               community_user_type /// Tipo de usuario en la comunidad (moderator - member)
  creation_timestamp DateTime            @default(now()) /// Timestamp de creación

  user         UserDetails      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  community    Communities      @relation(fields: [community_id], references: [id], onDelete: Cascade)
  publications Publications[] /// Relación uno a muchos: Publicaciones realizadas por este miembro
  comments     Comments[] /// Relación uno a muchos: Comentarios realizados por este miembro
  replies      CommentReplies[] /// Relación uno a muchos: Respuestas realizadas por este miembro
  reactions    Reactions[] /// Relación uno a muchos: Reacciones realizadas por este miembro

  @@map("community_users")
}

model Communities {
  id                 Int       @id @default(autoincrement()) /// Identificador único de la comunidad
  name               String /// Nombre de la comunidad
  description        String? /// Descripción de la comunidad
  banner             String? /// Banner de la comunidad
  icon               String? /// Icono representativo de la comunidad
  category_id        Int? /// Identificador de la categoría de la comunidad
  creation_timestamp DateTime? @default(now()) /// Timestamp de creación del registro

  communityUsers    CommunityUsers[] /// Relación uno a muchos: Usuarios asociados a esta comunidad
  communityCategory CommunityCategories? @relation(fields: [category_id], references: [id])
  communityMarkers  CommunityMarkers[] /// Relación uno a muchos: Marcadores asociados a esta comunidad
  communityRules    CommunityRules[] /// Relación uno a muchos: Reglas asociadas a esta comunidad
  publications      Publications[] /// Relación uno a muchos: Publicaciones asociadas a esta comunidad

  @@map("communities")
}

model CommunityCategories {
  id          Int     @id @default(autoincrement()) /// Identificador único de la categoría de comunidad
  name        String /// Nombre de la categoría de la comunidad
  description String? /// Descripción de la categoría de la comunidad

  communities Communities[] /// Relación uno a muchos: Comunidades asociadas a esta categoría

  @@map("community_categories")
}

model CommunityMarkers {
  id           Int    @id @default(autoincrement()) /// Identificador único del marcador
  community_id Int /// Identificador de la comunidad
  marker       String /// Marcador o etiqueta de la comunidad

  community Communities @relation(fields: [community_id], references: [id], onDelete: Cascade)

  @@map("community_markers")
}

model CommunityRules {
  id           Int    @id @default(autoincrement()) /// Identificador único de la regla
  community_id Int /// Identificador de la comunidad
  rule         String /// Regla de la comunidad

  community Communities @relation(fields: [community_id], references: [id], onDelete: Cascade)

  @@map("community_rules")
}

model Publications {
  id                 Int      @id @default(autoincrement()) /// Identificador único de la publicación
  title              String /// Título de la publicación
  description        String /// Descripción de la publicación
  community_id       Int /// Identificador de la comunidad
  multimedia         String? /// Multimedia (opcional)
  link               String? /// Enlace de la publicación (opcional)
  community_user_id  Int /// Identificador del miembro de comunidad que creó la publicación
  creation_timestamp DateTime @default(now()) /// Fecha de creación de la publicación

  community     Communities    @relation(fields: [community_id], references: [id], onDelete: Cascade)
  communityUser CommunityUsers @relation(fields: [community_user_id], references: [id], onDelete: Cascade)
  comments      Comments[] /// Relación uno a muchos: Comentarios asociados a esta publicación

  @@map("publications")
}

model Comments {
  id                 Int      @id @default(autoincrement()) /// Identificador único del comentario
  community_user_id  Int /// Identificador del miembro de comunidad que comentó
  comment            String /// Contenido del comentario
  publication_id     Int /// Identificador de la publicación relacionada
  creation_timestamp DateTime @default(now()) /// Fecha de creación del comentario

  publication   Publications     @relation(fields: [publication_id], references: [id], onDelete: Cascade)
  communityUser CommunityUsers   @relation(fields: [community_user_id], references: [id], onDelete: Cascade)
  replies       CommentReplies[] /// Relación uno a muchos: Respuestas asociadas a este comentario

  @@map("comments")
}

model CommentReplies {
  id                 Int      @id @default(autoincrement()) /// Identificador único de la respuesta
  comment_id         Int /// Identificador del comentario principal
  community_user_id  Int /// Identificador del miembro de comunidad que respondió
  reply              String /// Contenido de la respuesta
  creation_timestamp DateTime @default(now()) /// Fecha de creación de la respuesta

  comment       Comments       @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  communityUser CommunityUsers @relation(fields: [community_user_id], references: [id], onDelete: Cascade)

  @@map("comment_replies")
}

model Reactions {
  id                Int            @id @default(autoincrement()) /// Identificador único de la reacción
  community_user_id Int /// Usuario de comunidad que reaccionó
  target_id         Int /// ID del objeto al que reaccionó (publicación, comentario o respuesta)
  target_type       ReactionTarget /// Tipo de objeto al que reaccionó
  type              ReactionType /// Tipo de reacción (like/dislike)
  created_at        DateTime       @default(now()) /// Fecha de creación de la reacción

  communityUser CommunityUsers @relation(fields: [community_user_id], references: [id], onDelete: Cascade)

  @@unique([community_user_id, target_id, target_type]) /// Solo una reacción por usuario por elemento
  @@map("reactions")
}

model Events {
  id           Int       @id @default(autoincrement()) /// Identificador del evento
  lawyer_id    Int       /// Abogado asociado
  title        String    /// Título del evento
  description  String?   /// Descripción
  start_time   DateTime  @db.Time /// Hora de inicio (común para todas las fechas)
  end_time     DateTime  @db.Time /// Hora de fin (común para todas las fechas)

  lawyer       LawyerDetails @relation(fields: [lawyer_id], references: [lawyer_id], onDelete: Cascade)
  dates        EventDates[] /// Fechas específicas del evento

  @@map("events")
}

model EventDates {
  id        Int      @id @default(autoincrement()) /// ID único
  event_id  Int      /// Evento asociado
  date      DateTime @db.Date /// Fecha específica del evento

  event     Events   @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@unique([event_id, date]) // Evita duplicados
  @@map("event_dates")
}

model ExternalClients {
  id               Int      @id @default(autoincrement()) /// Identificador único del cliente externo
  user_detail_id   Int /// Usuario que registró al cliente externo
  full_name        String /// Nombre completo del cliente externo
  email            String?  @default("")/// Correo electrónico del cliente externo
  phone            String /// Teléfono del cliente externo
  dni              String /// Documento de identidad del cliente externo
  created_at       DateTime @default(now()) /// Fecha de registro del cliente externo

  user_detail      UserDetails @relation(fields: [user_detail_id], references: [user_id], onDelete: Cascade)
  services         Services[] /// Servicios asociados a este cliente externo

  @@map("external_clients")
}

model Services {
  id                 Int      @id @default(autoincrement()) /// Identificador único del servicio
  type               service_type  /// Tipo de servicio (consulta, caso, etc.)
  created_at         DateTime @default(now()) /// Fecha de creación del servicio
  lawyer_id          Int? /// ID del abogado que atiende el servicio
  client_id          Int? /// ID del cliente registrado
  external_client_id Int? /// ID del cliente externo (opcional)

  lawyer             UserDetails? @relation("LawyerServices", fields: [lawyer_id], references: [user_id])
  client             UserDetails? @relation("ClientServices", fields: [client_id], references: [user_id])
  external_client    ExternalClients? @relation(fields: [external_client_id], references: [id])

  cases              Cases[] /// Casos asociados a este servicio
  consultations      Consultations[] /// Consultas asociadas a este servicio
  calls              Calls[] /// Llamadas asociadas
  messages           Messages[] /// Mensajes entre abogado y cliente
  attachments        Attachments[] /// Archivos compartidos

  @@map("services")
}

model CaseCategories {
  id          Int     @id @default(autoincrement()) /// Identificador único de la categoría de caso
  name        String  @unique/// Nombre de la categoría
  description String? /// Descripción detallada de la categoría

  cases       Cases[] /// Casos que pertenecen a esta categoría

  @@map("case_categories")
}

model CaseStatuses {
  id          Int     @id @default(autoincrement()) /// Identificador único del estado del caso
  name        String  @unique/// Nombre del estado
  description String? /// Descripción del estado

  cases       Cases[] /// Casos que tienen este estado

  @@map("case_statuses")
}

model Cases {
  id             Int          @id @default(autoincrement()) /// Identificador único del caso
  service_id     Int /// ID del servicio asociado
  title          String /// Título breve del caso
  description    String /// Descripción completa del caso
  category_id    Int /// ID de la categoría asignada
  urgency        case_urgency /// Nivel de urgencia del caso
  status_id      Int /// ID del estado actual del caso
  is_public      Boolean 
  reference_code String @default(cuid()) /// Numero de expediente
  created_at     DateTime @default(now()) /// Fecha de creación del caso
  archived       Boolean @default(false) 

  service        Services       @relation(fields: [service_id], references: [id], onDelete: Cascade)
  category       CaseCategories @relation(fields: [category_id], references: [id])
  status         CaseStatuses   @relation(fields: [status_id], references: [id])
  histories      CaseHistories[] /// Historial de cambios del caso

  @@map("cases")
}

model CaseHistories {
  id         Int      @id @default(autoincrement()) /// Identificador único del historial
  case_id    Int /// ID del caso asociado
  changed_by Int  ///Saber quien hizo el cambio
  field      String   @db.VarChar(60)    ///Saber que campo fue cambiado (estado, archivado o documentado)  
  old_value  String /// Valor anterior antes del cambio
  new_value  String /// Nuevo valor asignado
  note       String? /// Comentario adicional
  created_at DateTime @default(now()) /// Fecha del cambio

  case       Cases @relation(fields: [case_id], references: [id])

  @@map("case_histories")
}

model Consultations {
  id             Int                  @id @default(autoincrement()) /// Identificador único de la consulta
  service_id     Int /// ID del servicio asociado
  topic          String /// Tema principal de la consulta
  question       String /// Pregunta detallada del cliente
  response       String? /// Respuesta del abogado (opcional)
  status         consultation_status /// Estado actual de la consulta
  created_at     DateTime @default(now()) /// Fecha de creación
  answered_at    DateTime? /// Fecha en que fue respondida (opcional)
  rating         Int? /// Calificación del cliente (1 a 5, opcional)
  priority       consultation_priority /// Prioridad asignada
  confidential   Boolean /// Si es confidencial
  requires_call  Boolean /// Si necesita llamada

  service        Services @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("consultations")
}

model CallCategories {
  id     Int     @id @default(autoincrement()) /// Identificador único de la categoría de llamada
  name   String /// Nombre de la categoría

  calls  Calls[] /// Llamadas asociadas

  @@map("call_categories")
}

model Calls {
  id               Int         @id @default(autoincrement()) /// Identificador único de la llamada
  type             String /// Tipo de llamada (voz, video, etc.)
  scheduled_date   DateTime /// Fecha agendada
  scheduled_time   DateTime /// Hora agendada
  duration_minutes Int /// Duración estimada en minutos
  status           call_status /// Estado de la llamada
  meeting_link     String /// Enlace a la reunión
  notes            String? /// Notas adicionales
  category_id      Int /// ID de la categoría
  service_id       Int /// ID del servicio relacionado
  created_at       DateTime @default(now()) /// Fecha de creación

  category         CallCategories @relation(fields: [category_id], references: [id])
  service          Services       @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("calls")
}

model Messages {
  id          Int        @id @default(autoincrement()) /// Identificador único del mensaje
  service_id  Int /// ID del servicio asociado
  content     String /// Contenido del mensaje
  sent_by     actor_type /// Emisor: lawyer o client
  is_read     Boolean /// Si fue leído
  created_at  DateTime   @default(now()) /// Fecha de envío

  service     Services   @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model AttachmentCategories {
  id           Int     @id @default(autoincrement()) /// Identificador único de la categoría
  name         String @unique/// Nombre de la categoría

  attachments  Attachments[] /// Archivos asociados

  @@map("attachment_categories")
}

model Attachments {
  id              Int        @id @default(autoincrement()) /// Identificador único del archivo
  file_key        String       /// ruta/key en S3
  label           String /// Nombre o etiqueta del archivo
  description     String? /// Descripción adicional
  category_id     Int /// ID de la categoría del archivo
  uploaded_by     actor_type /// Emisor del archivo: lawyer o client
  created_at      DateTime   @default(now()) /// Fecha de subida
  service_id      Int /// Servicio al que pertenece
  archived        Boolean  @default(false)

  service         Services            @relation(fields: [service_id], references: [id], onDelete: Cascade)
  category        AttachmentCategories @relation(fields: [category_id], references: [id])

  @@map("attachments")
}